{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { Doctor } from '../../Model/doctorModel';\nlet DoctorComponent = class DoctorComponent {\n  constructor(_apiService) {\n    this._apiService = _apiService;\n    this.doctor = new Doctor();\n    this.isDoctorSelected = false;\n  }\n  ngOnInit() {\n    this.listDoctor();\n  }\n  addDoctor() {\n    this._apiService.postDoctor(this.doctor).subscribe(res => {\n      alert(\"Doctor added Successfully\");\n      this.listDoctor();\n      this.closebutton.nativeElement.click(); // closing modal \n    }, err => {\n      alert(\"failed to add new doctor\");\n      console.log(err);\n    });\n  }\n  listDoctor() {\n    this._apiService.getDoctor().subscribe(res => {\n      this.doctorList = res;\n      //console.log(this.doctorList);\n    }, err => {});\n  }\n  selectedDoctor(id) {\n    this.isDoctorSelected = true; //to only tigger it when edit button is clicked so that editform is igonred at run time.\n    this.fetchDoctorId(id);\n    this._apiService.getDoctorById(id).subscribe(res => {\n      this.doctorRow = res;\n    }, err => {});\n  }\n  editDoctor() {\n    this._apiService.updateDoctor(this.doctorId, this.doctorRow).subscribe(res => {\n      this.listDoctor();\n      alert(\"Updated Successfully\");\n      this.close.nativeElement.click();\n    }, err => {});\n  }\n  fetchDoctorId(id) {\n    this.doctorId = id;\n  }\n  removeDoctor() {\n    this._apiService.deleteDoctor(this.doctorId).subscribe(res => {\n      this.listDoctor();\n      this.closedelete.nativeElement.click();\n    }, err => {\n      console.log(err);\n    });\n  }\n};\n__decorate([ViewChild('closebutton')], DoctorComponent.prototype, \"closebutton\", void 0);\n__decorate([ViewChild('close')], DoctorComponent.prototype, \"close\", void 0);\n__decorate([ViewChild('closedelete')], DoctorComponent.prototype, \"closedelete\", void 0);\nDoctorComponent = __decorate([Component({\n  selector: 'app-doctor',\n  templateUrl: './doctor.component.html',\n  styleUrls: ['./doctor.component.css']\n})], DoctorComponent);\nexport { DoctorComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,EAAUC,SAAS,QAAQ,eAAe;AAC5D,SAASC,MAAM,QAAQ,yBAAyB;AASzC,IAAMC,eAAe,GAArB,MAAMA,eAAe;EAS1BC,YAAqBC,WAAsB;IAAtB,gBAAW,GAAXA,WAAW;IARxB,WAAM,GAAS,IAAIH,MAAM,EAAE;IAGlC,qBAAgB,GAAU,KAAK;EAMhC;EACAI,QAAQ;IAEN,IAAI,CAACC,UAAU,EAAE;EACnB;EACAC,SAAS;IAEN,IAAI,CAACH,WAAW,CAACI,UAAU,CAAC,IAAI,CAACC,MAAM,CAAC,CAACC,SAAS,CACjDC,GAAG,IAAE;MACHC,KAAK,CAAC,2BAA2B,CAAC;MAClC,IAAI,CAACN,UAAU,EAAE;MACjB,IAAI,CAACO,WAAW,CAACC,aAAa,CAACC,KAAK,EAAE,CAAC;IACzC,CAAC,EACDC,GAAG,IAAE;MACHJ,KAAK,CAAC,0BAA0B,CAAC;MACjCK,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;IAClB,CAAC,CACD;EACJ;EACAV,UAAU;IACR,IAAI,CAACF,WAAW,CAACe,SAAS,EAAE,CAACT,SAAS,CACpCC,GAAG,IAAG;MACL,IAAI,CAACS,UAAU,GAACT,GAAG;MACnB;IACD,CAAC,EACDK,GAAG,IAAG,CAEN,CAAC,CACF;EACH;EAEAK,cAAc,CAACC,EAAS;IACtB,IAAI,CAACC,gBAAgB,GAAC,IAAI,CAAC;IAC3B,IAAI,CAACC,aAAa,CAACF,EAAE,CAAC;IACtB,IAAI,CAAClB,WAAW,CAACqB,aAAa,CAACH,EAAE,CAAC,CAACZ,SAAS,CAC1CC,GAAG,IAAE;MACH,IAAI,CAACe,SAAS,GAACf,GAAG;IACpB,CAAC,EACDK,GAAG,IAAE,CAEL,CAAC,CACF;EACH;EACAW,UAAU;IACR,IAAI,CAACvB,WAAW,CAACwB,YAAY,CAAC,IAAI,CAACC,QAAQ,EAAC,IAAI,CAACH,SAAS,CAAC,CAAChB,SAAS,CACnEC,GAAG,IAAE;MACH,IAAI,CAACL,UAAU,EAAE;MACjBM,KAAK,CAAC,sBAAsB,CAAC;MAC7B,IAAI,CAACkB,KAAK,CAAChB,aAAa,CAACC,KAAK,EAAE;IAGlC,CAAC,EACDC,GAAG,IAAE,CAEL,CAAC,CACF;EACH;EACAQ,aAAa,CAACF,EAAS;IAErB,IAAI,CAACO,QAAQ,GAACP,EAAE;EAClB;EACAS,YAAY;IAEV,IAAI,CAAC3B,WAAW,CAAC4B,YAAY,CAAC,IAAI,CAACH,QAAQ,CAAC,CAACnB,SAAS,CACpDC,GAAG,IAAE;MACH,IAAI,CAACL,UAAU,EAAE;MACjB,IAAI,CAAC2B,WAAW,CAACnB,aAAa,CAACC,KAAK,EAAE;IACxC,CAAC,EACDC,GAAG,IAAE;MAEHC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;IAClB,CAAC,CACF;EACH;CACD;AA/E2BkB,YAAxBlC,SAAS,CAAC,aAAa,CAAC,oDAAgB;AACtBkC,YAAlBlC,SAAS,CAAC,OAAO,CAAC,8CAAU;AACHkC,YAAzBlC,SAAS,CAAC,aAAa,CAAC,oDAAiB;AAPhCE,eAAe,eAL3BH,SAAS,CAAC;EACToC,QAAQ,EAAE,YAAY;EACtBC,WAAW,EAAE,yBAAyB;EACtCC,SAAS,EAAE,CAAC,wBAAwB;CACrC,CAAC,GACWnC,eAAe,CAoF3B;SApFYA,eAAe","names":["Component","ViewChild","Doctor","DoctorComponent","constructor","_apiService","ngOnInit","listDoctor","addDoctor","postDoctor","doctor","subscribe","res","alert","closebutton","nativeElement","click","err","console","log","getDoctor","doctorList","selectedDoctor","id","isDoctorSelected","fetchDoctorId","getDoctorById","doctorRow","editDoctor","updateDoctor","doctorId","close","removeDoctor","deleteDoctor","closedelete","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\HealthCareSystem\\HospitalClient\\HospitalClient\\src\\app\\Components\\doctor\\DoctorComponent.ts"],"sourcesContent":["import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { Doctor } from '../../Model/doctorModel';\r\nimport { ApiService } from '../../Service/api.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-doctor',\r\n  templateUrl: './doctor.component.html',\r\n  styleUrls: ['./doctor.component.css']\r\n})\r\nexport class DoctorComponent implements OnInit {\r\n   public doctor: Doctor=new Doctor();   \r\n   public doctorList: any;\r\n   public doctorRow: any;\r\n   isDoctorSelected:boolean =false;\r\n   @ViewChild('closebutton')closebutton:any;// for closeing the modal after data manipulation to make user friendly UI.\r\n   @ViewChild('close')close:any; //For edit.  #close refrence \r\n   @ViewChild('closedelete') closedelete:any;\r\n  doctorId: any;\r\n  constructor( private _apiService:ApiService) {\r\n  }\r\n  ngOnInit(): void \r\n  {\r\n    this.listDoctor();\r\n  }\r\n  addDoctor()\r\n  {  \r\n     this._apiService.postDoctor(this.doctor).subscribe(\r\n      res=>{\r\n        alert(\"Doctor added Successfully\");\r\n        this.listDoctor();\r\n        this.closebutton.nativeElement.click();// closing modal \r\n      },\r\n      err=>{\r\n        alert(\"failed to add new doctor\");\r\n        console.log(err);\r\n      }\r\n     );\r\n  }\r\n  listDoctor(){\r\n    this._apiService.getDoctor().subscribe(\r\n      res =>{\r\n       this.doctorList=res;\r\n       //console.log(this.doctorList);\r\n      },\r\n      err =>{\r\n\r\n      }\r\n    );\r\n  }\r\n\r\n  selectedDoctor(id:number){\r\n    this.isDoctorSelected=true;//to only tigger it when edit button is clicked so that editform is igonred at run time.\r\n    this.fetchDoctorId(id);\r\n    this._apiService.getDoctorById(id).subscribe(\r\n      res=>{\r\n        this.doctorRow=res;\r\n      },\r\n      err=>{\r\n\r\n      }\r\n    )\r\n  }\r\n  editDoctor(){\r\n    this._apiService.updateDoctor(this.doctorId,this.doctorRow).subscribe(\r\n      res=>{\r\n        this.listDoctor();\r\n        alert(\"Updated Successfully\");\r\n        this.close.nativeElement.click();\r\n        \r\n\r\n      },\r\n      err=>{\r\n   \r\n      }\r\n    )\r\n  }\r\n  fetchDoctorId(id:number)\r\n  {\r\n    this.doctorId=id;\r\n  }\r\n  removeDoctor()\r\n  {\r\n    this._apiService.deleteDoctor(this.doctorId).subscribe(\r\n      res=>{\r\n        this.listDoctor();\r\n        this.closedelete.nativeElement.click();\r\n      },\r\n      err=>{\r\n\r\n        console.log(err);\r\n      }\r\n    )\r\n  }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}